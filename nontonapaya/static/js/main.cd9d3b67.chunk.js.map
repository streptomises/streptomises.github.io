{"version":3,"sources":["components/loading/loading.gif","components/loading/Loading.js","services/AnimeService.js","components/anime/Anime.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loading","className","src","gif","alt","React","Component","AnimeService","this","api","jikanjs","min","max","Math","ceil","floor","random","getRandomInt","length","id","loadAnime","now","Date","year","getFullYear","season","randomSeason","loadSeason","response","anime","getAnime","console","log","Anime","props","state","view","setState","genres","map","genre","name","join","data","parseGenres","onClick","fetchRandomAnime","href","target","loading","animeService","App","bodyComponent","start","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd9d3b67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.3f0f4373.gif\";","import React from \"react\";\nimport gif from './loading.gif';\nimport './Loading.scss';\n\nclass Loading extends React.Component {\n    render() {\n        return (\n            <div className=\"Loading\">\n                <img src={gif} alt=\"loading_gif\" />\n            </div>\n        )\n    }\n}\n\nexport default Loading;","import jikanjs from 'jikanjs'\n\n\nclass AnimeService {\n\n    #season = [\n        'summer',\n        'spring',\n        'fall',\n        'winter'\n    ];\n\n    constructor() {\n        this.api = jikanjs\n    }\n\n    getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    randomSeason() {\n        return this.#season[this.getRandomInt(0, this.#season.length - 1)]\n    }\n\n    async getAnime(id) {\n        try {\n            return await jikanjs.loadAnime(id);\n        } catch (exception) {\n            return null;\n        }\n    }\n\n    async random() {\n        try {\n            let now = new Date();\n            let year = this.getRandomInt(now.getFullYear() - 10, now.getFullYear());\n            let season = this.randomSeason();\n            let response = await jikanjs.loadSeason(year, season);\n            let anime = response['anime'][this.getRandomInt(0, response['anime'].length - 1)];\n            return await this.getAnime(anime['mal_id']);\n        } catch (exception) {\n            console.log(exception);\n            return null;\n        }\n    }\n\n}\n\nexport default AnimeService;","import React from \"react\";\nimport './Anime.scss';\nimport Loading from \"../loading/Loading\";\nimport AnimeService from \"../../services/AnimeService\";\n\n\nclass Anime extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            view: null\n        };\n    }\n\n    loading() {\n        this.setState({\n            view: <Loading />\n        });\n    }\n\n    parseGenres(genres) {\n        return genres.map((genre) => {\n            return genre.name;\n        }).join(', ');\n    }\n\n    anime(data) {\n        return (\n            <div className=\"Anime-container\">\n                <div className=\"Anime-fields\">\n                    <div className=\"Anime-img\">\n                        <img src={data['image_url'] || ''} alt=\"anime-label\"/>\n                    </div>\n                    <div className=\"Anime-information\">\n                        <h1>{data['title'] || '?'}</h1>\n                        <h2>{data['title_japanese'] || ''}</h2>\n                        <ul className=\"stats\">\n                            <li><strong>Episodes:</strong> {data['episodes'] || '?'}</li>\n                            <li><strong>Duration:</strong> {data['duration'] || '?'}</li>\n                            <li><strong>Premiered:</strong> {data['premiered'] || '?'}</li>\n                            <li><strong>Status:</strong> {data['status'] || '?'}</li>\n                            <li><strong>Score:</strong> {data['score'] || '?'}</li>\n                            <li><strong>Genres:</strong> {this.parseGenres(data['genres']) || '?'}</li>\n                            <li><strong>Rating:</strong> {data['rating'] || '?'}</li>\n                        </ul>\n                        <section className=\"synopsis-section\">\n                            <h4>Synopsis:</h4>\n                            <p>{data['synopsis'] || '?'}</p>\n                        </section>\n                    </div>\n                </div>\n                <div className=\"buttons-container\">\n                    <button className=\"btn btn-primary\" onClick={() => this.fetchRandomAnime()}>Pilih Acak Lagi</button>\n                    <a className=\"btn btn-secondary\" href={data['url']} target=\"_blank\">Lihat di MyAnimeList</a>\n                </div>\n            </div>\n        )\n    }\n\n    async fetchRandomAnime() {\n        this.loading();\n\n        let animeService = new AnimeService();\n        let response = await animeService.random();\n\n        if (!response) {\n            this.fetchRandomAnime();\n            return;\n        }\n\n        this.setState({\n            view: this.anime(response)\n        });\n    }\n\n    componentDidMount() {\n        this.fetchRandomAnime()\n    }\n\n    render() {\n        return (\n            <div className=\"Anime\">\n                {this.state.view}\n            </div>\n        )\n    }\n}\n\nexport default Anime;\n","import React from 'react';\nimport './App.scss';\nimport Anime from \"./components/anime/Anime\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      anime: null\n    };\n  }\n\n  start() {\n    this.setState({\n      anime: <Anime />\n    });\n  }\n\n  render() {\n    let bodyComponent;\n\n    if (!this.state.anime) {\n      bodyComponent = <button className=\"btn btn-primary\" onClick={() => this.start()}>Klik Disini Untuk Pilih Anime Secara Acak</button>\n    } else {\n      bodyComponent = this.state.anime\n    }\n\n    return (\n        <div className=\"App\">\n            <header>\n              <h1><a href=\"https://octaviyawn.xyz/\">octaviyawn</a></h1>\n            </header>\n            <div className=\"App-container\">\n              {bodyComponent}\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}